apiVersion: template.openshift.io/v1
kind: Template
labels:
  template: mssql-server-persistent
message: >-
  The following service(s) have been created in your project:
  ${DATABASE_SERVICE_NAME}.

         Username: sa
         Password: ${SQLSERVER_PASSWORD}

  For more information about using this template, including OpenShift
  considerations, see https://github.com/Microsoft/mssql-docker.git.
metadata:
  annotations:
    description: >-
      Microsoft SQL Server (persistent) on OpenShift
    openshift.io/display-name: SQL Server (persistent)
    openshift.io/documentation-url: 'https://github.com/Microsoft/mssql-docker.git'
    tags: 'microsoft,sql-server,databse'
  name: mssql-server-persistent
objects:
  - apiVersion: image.openshift.io/v1
    kind: ImageStream
    metadata:
      name: rhel7
    spec:
      lookupPolicy:
        local: false
      tags:
      - annotations:
          openshift.io/imported-from: registry.access.redhat.com/rhel7
        from:
          kind: DockerImage
          name: registry.access.redhat.com/rhel7
        importPolicy: {}
        name: latest
        referencePolicy:
          type: Source
  - apiVersion: image.openshift.io/v1
    kind: ImageStream
    metadata:
      labels:
        build: ${DATABASE_SERVICE_NAME}
      name: ${DATABASE_SERVICE_NAME}
    spec:
      lookupPolicy:
        local: false
  - apiVersion: v1
    kind: Secret
    metadata:
      annotations:
        template.openshift.io/expose-password: '{.data[''database-password'']}'
        template.openshift.io/expose-username: '{.data[''database-user'']}'
      name: '${DATABASE_SERVICE_NAME}'
    stringData:
      database-password: '${SQLSERVER_PASSWORD}'
      database-user: 'sa'
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      name: ${DATABASE_SERVICE_NAME}
    spec:
      accessModes:
      - ReadWriteMany
      resources:
        requests:
          storage: ${DATABASE_SIZE}
  - apiVersion: apps.openshift.io/v1
    kind: DeploymentConfig
    metadata:
      labels:
        app: ${DATABASE_SERVICE_NAME}
      name: ${DATABASE_SERVICE_NAME}
    spec:
      replicas: 1
      selector:
        app: ${DATABASE_SERVICE_NAME}
        deploymentconfig: ${DATABASE_SERVICE_NAME}
      strategy:
        activeDeadlineSeconds: 21600
        resources: {}
        rollingParams:
          intervalSeconds: 1
          maxSurge: 25%
          maxUnavailable: 25%
          timeoutSeconds: 600
          updatePeriodSeconds: 1
        type: Rolling
      template:
        metadata:
          labels:
            app: ${DATABASE_SERVICE_NAME}
            deploymentconfig: ${DATABASE_SERVICE_NAME}
        spec:
          containers:
          - env:
            - name: ACCEPT_EULA
              value: "Y"
            - name: SA_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: database-password
                  name: '${DATABASE_SERVICE_NAME}'
            image: ""
            imagePullPolicy: Always
            name: ${DATABASE_SERVICE_NAME}
            ports:
            - containerPort: 1433
              protocol: TCP
            resources: {}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            volumeMounts:
            - mountPath: /var/opt/mssql/data
              name: ${DATABASE_SERVICE_NAME}
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext: {}
          terminationGracePeriodSeconds: 30
          volumes:
          - persistentVolumeClaim:
              claimName: ${DATABASE_SERVICE_NAME}
            name: ${DATABASE_SERVICE_NAME}
      test: false
      triggers:
      - type: ConfigChange
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${DATABASE_SERVICE_NAME}
          from:
            kind: ImageStreamTag
            name: sqlserver:latest
        type: ImageChange
  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: ${DATABASE_SERVICE_NAME}
      name: ${DATABASE_SERVICE_NAME}
    spec:
      ports:
      - name: 1433-tcp
        port: 1433
        protocol: TCP
        targetPort: 1433
      selector:
        deploymentconfig: ${DATABASE_SERVICE_NAME}
      sessionAffinity: None
      type: ClusterIP
  - apiVersion: build.openshift.io/v1
    kind: BuildConfig
    metadata:
      labels:
        build: ${DATABASE_SERVICE_NAME}
      name: ${DATABASE_SERVICE_NAME}
    spec:
      failedBuildsHistoryLimit: 5
      nodeSelector: null
      output:
        to:
          kind: ImageStreamTag
          name: ${DATABASE_SERVICE_NAME}:latest
      postCommit: {}
      resources: {}
      runPolicy: Serial
      source:
        contextDir: linux/preview/RHEL
        git:
          uri: https://github.com/Microsoft/mssql-docker.git
        type: Git
      strategy:
        dockerStrategy:
          from:
            kind: ImageStreamTag
            name: rhel7:latest
        type: Docker
      successfulBuildsHistoryLimit: 5
      triggers:
      - github:
          secret: ${GITHUB_SECRET}
        type: GitHub
      - generic:
          secret: ${GENERIC_SECRET}
        type: Generic
      - type: ConfigChange
      - imageChange:
        type: ImageChange
parameters:
  - description: The name assigned to the database service.
    displayName: Database Service Name
    name: DATABASE_SERVICE_NAME
    required: true
    value: sqlserver
  - description: Database persistent volume size
    displayName: Database volume size
    name: DATABASE_SIZE
    required: false
    value: 10Gi
  - description: SQL Server password to authenticate using sa user.
    displayName: SQL Server sa user password
    from: '[a-zA-Z0-9]{16}'
    generate: expression
    name: SQLSERVER_PASSWORD
  - displayName: Generic secret to trigger build
    name: GENERIC_SECRET
    from: '[a-zA-Z0-9]{16}'
    generate: expression
  - displayName: Github secret to trigger build
    name: GITHUB_SECRET
    from: '[a-zA-Z0-9]{16}'
    generate: expression
apiVersion: template.openshift.io/v1
kind: Template
labels:
  template: mssql-server-persistent
message: >-
  The following service(s) have been created in your project:
  ${DATABASE_SERVICE_NAME}.

         Username: sa
         Password: ${SQLSERVER_PASSWORD}

  For more information about using this template, including OpenShift
  considerations, see https://github.com/Microsoft/mssql-docker.git.
metadata:
  annotations:
    description: >-
      Microsoft SQL Server (persistent) on OpenShift
    openshift.io/display-name: SQL Server (persistent)
    openshift.io/documentation-url: 'https://github.com/Microsoft/mssql-docker.git'
    tags: 'microsoft,sql-server,databse'
  name: mssql-server-persistent
objects:
  - apiVersion: v1
    kind: Secret
    metadata:
      annotations:
        template.openshift.io/expose-password: '{.data[''database-password'']}'
        template.openshift.io/expose-username: '{.data[''database-user'']}'
      name: '${DATABASE_SERVICE_NAME}'
    stringData:
      database-password: '${SQLSERVER_PASSWORD}'
      database-user: 'sa'
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      name: ${DATABASE_SERVICE_NAME}
    spec:
      accessModes:
      - ReadWriteMany
      resources:
        requests:
          storage: ${DATABASE_SIZE}
  - apiVersion: apps.openshift.io/v1
    kind: DeploymentConfig
    metadata:
      labels:
        app: ${DATABASE_SERVICE_NAME}
      name: ${DATABASE_SERVICE_NAME}
    spec:
      replicas: 1
      selector:
        app: ${DATABASE_SERVICE_NAME}
        deploymentconfig: ${DATABASE_SERVICE_NAME}
      strategy:
        activeDeadlineSeconds: 21600
        recreateParams:
          post:
            execNewPod:
              command:
                - /bin/sh
                - '-c'
                - >-
                  sleep 30 && /opt/mssql-tools/bin/sqlcmd -U sa -P ${SA_PASSWORD} -S
                  sqlserver -Q "CREATE DATABASE ${DATABASE_NAME}"
              containerName: sqlserver
            failurePolicy: Ignore
          timeoutSeconds: 600
        resources: {}
        type: Recreate
      template:
        metadata:
          labels:
            app: ${DATABASE_SERVICE_NAME}
            deploymentconfig: ${DATABASE_SERVICE_NAME}
        spec:
          containers:
          - env:
            - name: ACCEPT_EULA
              value: "Y"
            - name: SA_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: database-password
                  name: '${DATABASE_SERVICE_NAME}'
            image: ""
            imagePullPolicy: Always
            name: ${DATABASE_SERVICE_NAME}
            ports:
            - containerPort: 1433
              protocol: TCP
            resources: {}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            readinessProbe:
              failureThreshold: 3
              initialDelaySeconds: 10
              periodSeconds: 10
              successThreshold: 1
              tcpSocket:
                port: 1433
              timeoutSeconds: 3
            livenessProbe:
              failureThreshold: 3
              initialDelaySeconds: 15
              periodSeconds: 10
              successThreshold: 1
              tcpSocket:
                port: 1433
              timeoutSeconds: 3
            volumeMounts:
            - mountPath: /var/opt/mssql/data
              name: ${DATABASE_SERVICE_NAME}
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext: {}
          terminationGracePeriodSeconds: 30
          volumes:
          - persistentVolumeClaim:
              claimName: ${DATABASE_SERVICE_NAME}
            name: ${DATABASE_SERVICE_NAME}
      test: false
      triggers:
      - type: ConfigChange
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${DATABASE_SERVICE_NAME}
          from:
            kind: ImageStreamTag
            name: ${IMAGE_NAME}:latest
            namespace: "${IMAGE_NAMESPACE}"
          lastTriggeredImage: ''
        type: ImageChange
  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: ${DATABASE_SERVICE_NAME}
      name: ${DATABASE_SERVICE_NAME}
    spec:
      ports:
      - name: 1433-tcp
        port: 1433
        protocol: TCP
        targetPort: 1433
      selector:
        deploymentconfig: ${DATABASE_SERVICE_NAME}
      sessionAffinity: None
      type: ClusterIP
parameters:
  - description: The name assigned to the database service.
    displayName: Database Service Name
    name: DATABASE_SERVICE_NAME
    required: true
    value: sqlserver
  - description: The name of a database to create within SQLServer.
    displayName: Database Name
    name: DATABASE_NAME
    required: true
    value: monolith
  - description: Database persistent volume size
    displayName: Database volume size
    name: DATABASE_SIZE
    required: false
    value: 10Gi
  - description: The name of the image to use
    displayName: Container Image name
    name: IMAGE_NAME
    required: true
    value: sqlserver
  - description: The namespace where to get container image
    displayName: Container Image name
    name: IMAGE_NAMESPACE
    required: true
    value: openshift
  - description: SQL Server password to authenticate using sa user.
    displayName: SQL Server sa user password
    from: '[a-zA-Z0-9]{16}'
    generate: expression
    name: SQLSERVER_PASSWORD
